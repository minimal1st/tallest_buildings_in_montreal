/*

##################################################
<> username: minimal1st.
<> project: Tallest Buildings in Montr√©al.
<> coding: utf-8.
<> last updated: june 11th 2016.
##################################################  

<> Overview of the Project

<> Files of the project: js/app.js, index.html, css/main.css and README.md. 

<> app.js contains the logic of the application (JavaScript & Knockout), index.html the structure of the page, and main.css the stylesheet.

<> The project is a one-page application that displays the 26 tallest buildings in the city of Montreal. 

<> The application can be divided into three sections: the sidebar, the top navbar, and the map.

<> In the sidebar, there is a list of the 26 tallest buildings in the city of Montreal.

<> All buildings by default are located on the map and information about them can be obtained by either clicking on their map marker, which is located on the map, or directly on the item in the list.

<> Whenever a user clicks on a marker or on an item in the list, the associated map marker is animated and an InfoWindow is opened.

<> The InfoWindow contains a picture and textual information about the building, which is pulled from Wikipedia. 

<> The application is responsive and should be usable on all devices.

<> The search bar disappears when the screen size is less than 768px and is replaced by a burger icon. 

<> Clicking the burger icon when it is visible brings back the search bar.

<> The programming languages that were used for this project are: HTML, CSS, JavaScript, jQuery, Knockout.js.

<> Google Maps API was used; the map is a courtesy of our friends at Google.

##################################################

## main.css is a cascading style sheet.

It is a style sheet language used for describing the presentation of a document written in a markup language.

Most of the CSS rules (i.e. styling) pertaining to the 'Tallest Buildings in Montreal' project are contained in this file. 

Of course, since Bootstrap is used, not all CSS rules that have been applied to the application are present in main.css. 

If you want to learn more about bootstrap, I suggest looking at source code of Bootstrap on GitHub. CSS is easy to learn and trying to read and understand can be a good way to really understand CSS rules at a deep level.

## Link: https://github.com/twbs/bootstrap

Disclaimer: Some of the following explanations regarding CSS rules are my creation, while others have been inspired or taken directly from Mozilla Developer Network. These are my personal notes and are not meant to be educational material. 

If you want to learn more about web technologies, I highly suggest you take a look at the tutorials and documentations available at https://developer.mozilla.org/en-US/.
*/

/* 
@media query: if the viewport width less or equal than 420px then the brand logo is hidden.
*/
@media (max-width: 420px){
  .brand { 
    display: none; 
  }
}

/* 
@media query: if the width of navbar is less than 100px, the height of the navbar will be fixed to 50px.
*/
@media (max-width: 100px){
  .navbar { 
    position: absolute; 
    height: 50px;
  }
}

/* 
::-webkit-scrollbar: 10px wide scrollbar using webkit 
*/
::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 10px;
}

/* 
::-webkit-scrollbar-thumb: The following rules style the 'thumb' (i.e. scroller) border-radius and box-shadow generally makes things to very nice.
*/
::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(0, 0, 0, .5);
  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
}

/*
.navbar-brand: navbar brand text is set to 20px.
*/
.navbar-brand { 
  font-size: 20px; 
}
/*
.brand: band text color is white.
*/
.brand { 
  color: white; 
}

/* 
Color of links is black and, using the word-wrap property, the words break whenver they don't fit the size of their parent container.
*/
a { 
  color: black; 
  margin-right: 0px;
  word-wrap: break-word; 
}

/* 
This applies to the marker glyps in the navbar and the color is the same as the original color of the markers from the Google Map API.
*/
.markerglyph, #wiki { 
  color: #FE7569;
 } 

/*
The club class is applied to the li items that are generated by the Knockout framework. The items are part of the list of locations appearing to the left of the application.
*/
.club { 
  font-size: 18px; 
  text-align: left;
}

/* 

THE FOLLOWING BLOCKS OF TEXT ARE ABOUT TO THE CSS RULES APPLIED TO THE SIDEBAR. 

Many rules have been applied to the sidebar and I will not go over all of them. 

Instead, I will explain some of the CSS rules that are less obvious: position, z-index, and display.

# position

The position properly in CSS has four legal values: static, relative, absolute, fixed.

a) position: static

## This is the default behavior when you do not
## apply any HTML to your css. Elements are laid
## out in the order they occur in the markup.

b) position: relative

## An element with position:relative is first 
## laid out like any static element: bock-level 
## or inline. However, whenever the properties 
## top, bottom, left and right properties are 
## specified, then the element is shifted 
## according to these properties. 

e.g. if you want your banner to appear 20px 
below the top, then you would set top to 20px.

c) position: absolute

No space will be left in the page for the element.
Position relative to closest positioned ancestor if
any, or otherwise relative to the containing block.

d) positon: fixed

No space will be left in the page for the element.
It is positioned at a fixed position relative to 
the screen viewport and does not move when the
user scrolls.

# display

display: This CSS property specifies the type of rendering box used for an element. 

My goal is not to cover all possible case of the display property, but to simply enumerate some of the most useful.

a) none: Turns off the display of an element. The document is rendered as though the element did not exist.

b) inline: Does not create a new line. This means that there can be multiple inline elements on a single line. 

One cannot apply width, top-margin, bottom-margin, and height properties to inline elements. If floated, then it becomes a block element. 

c) inline-block: This generates a block-element that will flows with surrounding content as if it were a singe inline box.

d) flex: The element behaves like a block element and lays out its content accoridng to the flexbox model.

# z-index

z-index: This property specifies the z-order of an element and its descendants. 

If two or more elements overlap, z-order determines which element appear on top of another. 

Elements will large z-index will appear over elements with lower z-index.
*/
.sidebar {
  position: fixed;
  top: 51px;
  bottom: 0;
  left:
  z-index: 1000;
  display: block;
  padding: 20px;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: #f5f5f5;
  border-right: 1px solid #eee;
}

/* 
#map: height is set to 100% of the viewport height, display is set to flex so that the error message if the Google Maps API failed to load is nicely centered.
*/
#map {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 
img.wiki_img: the images that are displayed in the InfoWindow are floated to the right, have height of 200px and a box-shadow effect is applied to them. 
*/
img.wiki_img { 
  margin: 4px;
  box-shadow: 0 5px 9px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  float:right;
  height: 200px;
 }

/* 
#info: font-size of text inside InfoWindows
*/
#info {
  font-size: 16px;
}

/* 
.numberSquare: The sole purpose of this class is to draw a nice circle around the number displayed next to the location. The number represents the rank of the building, in terms of its tallness.
*/
.numberSquare {
  border: 1px solid black;
  display: inline;
  padding-left: 4px;
  margin-left: 2px;
  margin-right: 2px;
  padding-right: 4px;
  border-radius: 4px;
}